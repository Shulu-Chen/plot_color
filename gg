import pulp as lp

# Sample data
P = 3  # total number of passengers
S = 4  # number of seats per aircraft
G = [8, 8, 8, 8]  # maximum number of gates per vertiport
A = 10  # fixed number of aircraft
passenger_data = [
    (0, 1, 2, 10),  # (passenger_id, origin_vertiport, destination_vertiport, arrival_time)
    (1, 2, 3, 20),
    (2, 3, 4, 30)
]
vertiports = [1, 2, 3, 4]
time_intervals = list(range(24))  # example: 24 hourly intervals
flying_time = {(1, 2): 1, (2, 3): 1, (3, 4): 1, (4, 1): 1}  # flying times between vertiports
charging_time = 1  # charging time of aircraft

# Create a problem variable
prob = lp.LpProblem("AirTaxiOptimization", lp.LpMaximize)

# Decision variables
x = lp.LpVariable.dicts("x", (vertiports, vertiports, range(A), time_intervals), cat='Binary')
z = lp.LpVariable.dicts("z", range(P), cat='Binary')
y = lp.LpVariable.dicts("y", (vertiports, time_intervals), cat='Integer')
y_p = lp.LpVariable.dicts("y_p", range(P), cat='Binary')

# Objective function: Maximize the number of passengers served
prob += lp.lpSum(z[p] for p in range(P)), "Maximize number of passengers served"

# Constraints

# Gates constraint at each vertiport
for i in vertiports:
    for t in time_intervals:
        prob += y[i][t] <= G[i - 1], f"Gate constraint at vertiport {i} time {t}"

# Aircraft presence at vertiports over time
for i in vertiports:
    for t in range(len(time_intervals) - 1):
        arrivals = lp.lpSum(x[j][i][k][t - flying_time.get((j, i), 0)]
                            for j in vertiports for k in range(A)
                            if (j != i) and (t - flying_time.get((j, i), 0) >= 0))
        departures = lp.lpSum(x[i][j][k][t] for j in vertiports for k in range(A) if j != i)
        prob += y[i][t + 1] == y[i][t] + arrivals - departures, f"Aircraft presence at vertiport {i} time {t}"

# Initial number of aircraft can be distributed among all vertiports
prob += lp.lpSum(y[i][0] for i in vertiports) == A, "Initial distribution of aircraft"

# Passenger assignment constraint
for p, (pid, o_p, d_p, t_p) in enumerate(passenger_data):
    prob += y_p[p] == lp.lpSum(x[o_p][d_p][k][t] for k in range(A) for t in time_intervals), f"Passenger assignment {p}"

# Passenger capacity constraint for each flight
for i in vertiports:
    for j in vertiports:
        if i != j:
            for k in range(A):
                for t in time_intervals:
                    prob += lp.lpSum(y_p[p] for p, (pid, o_p, d_p, t_p) in enumerate(passenger_data)
                                     if o_p == i and d_p == j and t_p == t) <= S, f"Capacity constraint flight {i}-{j} time {t}"

# Passenger timing constraint
for p, (pid, o_p, d_p, t_p) in enumerate(passenger_data):
    prob += z[p] <= lp.lpSum(x[o_p][d_p][k][t] for k in range(A) for t in time_intervals
                             if t_p - 0.5 <= t <= t_p + 0.5), f"Timing constraint passenger {p}"

# Flight scheduling constraint considering flying and charging times
for i in vertiports:
    for j in vertiports:
        for k in range(A):
            for t in time_intervals:
                if t + flying_time.get((i, j), 0) + charging_time < len(time_intervals):
                    prob += x[i][j][k][t] + x[j][i][k][t + flying_time.get((i, j), 0) + charging_time] <= 1, f"Scheduling constraint {i}-{j} time {t}"

# Prevent scheduling flights with the same origin and destination vertiport
for i in vertiports:
    for k in range(A):
        for t in time_intervals:
            prob += x[i][i][k][t] == 0, f"Prevent same origin-destination {i} time {t}"

# Solve the problem
prob.solve(lp.LpSolverDefault())

# Print the results
print(f"Status: {lp.LpStatus[prob.status]}")
print(f"Optimal number of passengers served: {lp.value(prob.objective)}")
for p in range(P):
    if lp.value(z[p]) > 0.5:
        print(f"Passenger {p+1} is served")
for i in vertiports:
    for j in vertiports:
        for k in range(A):
            for t in time_intervals:
                if lp.value(x[i][j][k][t]) > 0.5:
                    print(f"Flight from vertiport {i} to vertiport {j} at time {t} with aircraft {k+1}")